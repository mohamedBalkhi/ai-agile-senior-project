// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Senior.AgileAI.BaseMgt.Infrastructure.Data;

#nullable disable

namespace Senior.AgileAI.BaseMgt.Api.Migrations
{
    [DbContext(typeof(PostgreSqlAppDbContext))]
    [Migration("20241029083558_last_check")]
    partial class last_check
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Senior.AgileAI.BaseMgt.Domain.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.ToTable("Countries", "public");
                });

            modelBuilder.Entity("Senior.AgileAI.BaseMgt.Domain.Entities.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationManager_IdOrganizationManager")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationManager_IdOrganizationManager")
                        .IsUnique();

                    b.ToTable("Organizations", "public");
                });

            modelBuilder.Entity("Senior.AgileAI.BaseMgt.Domain.Entities.OrganizationMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("HasAdministrativePrivilege")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsManager")
                        .HasColumnType("boolean");

               

                    b.Property<Guid>("Organization_IdOrganization")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("User_IdUser")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Organization_IdOrganization");

                    b.HasIndex("User_IdUser")
                        .IsUnique();

                    b.ToTable("OrganizationMembers", "public");
                });

            modelBuilder.Entity("Senior.AgileAI.BaseMgt.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Organization_IdOrganization")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectManager_IdProjectManager")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("Organization_IdOrganization");

                    b.HasIndex("ProjectManager_IdProjectManager");

                    b.ToTable("Projects", "public");
                });

            modelBuilder.Entity("Senior.AgileAI.BaseMgt.Domain.Entities.ProjectPrivilege", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Meetings")
                        .HasColumnType("integer");

                    b.Property<int>("Members")
                        .HasColumnType("integer");

                    b.Property<Guid>("OrganizationMember_IdOrganizationMember")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Project_IdProject")
                        .HasColumnType("uuid");

                    b.Property<int>("Requirements")
                        .HasColumnType("integer");

                    b.Property<int>("Settings")
                        .HasColumnType("integer");

                    b.Property<int>("Tasks")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationMember_IdOrganizationMember");

                    b.HasIndex("Project_IdProject");

                    b.ToTable("ProjectPrivileges", "public");
                });

            modelBuilder.Entity("Senior.AgileAI.BaseMgt.Domain.Entities.ProjectRequirement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Project_IdProject")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("Project_IdProject");

                    b.ToTable("ProjectRequirements", "public");
                });

            modelBuilder.Entity("Senior.AgileAI.BaseMgt.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("User_IdUser")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("User_IdUser");

                    b.HasIndex("User_IdUser", "Token");

                    b.ToTable("RefreshTokens", "public");
                });

            modelBuilder.Entity("Senior.AgileAI.BaseMgt.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<Guid>("Country_IdCountry")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FUllName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTrusted")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("Country_IdCountry");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", "public");
                });

            modelBuilder.Entity("Senior.AgileAI.BaseMgt.Domain.Entities.Organization", b =>
                {
                    b.HasOne("Senior.AgileAI.BaseMgt.Domain.Entities.User", "OrganizationManager")
                        .WithOne("Organization")
                        .HasForeignKey("Senior.AgileAI.BaseMgt.Domain.Entities.Organization", "OrganizationManager_IdOrganizationManager")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("OrganizationManager");
                });

            modelBuilder.Entity("Senior.AgileAI.BaseMgt.Domain.Entities.OrganizationMember", b =>
                {
                    b.HasOne("Senior.AgileAI.BaseMgt.Domain.Entities.Organization", "Organization")
                        .WithMany("OrganizationMembers")
                        .HasForeignKey("Organization_IdOrganization")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Senior.AgileAI.BaseMgt.Domain.Entities.User", "User")
                        .WithOne("OrganizationMember")
                        .HasForeignKey("Senior.AgileAI.BaseMgt.Domain.Entities.OrganizationMember", "User_IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Senior.AgileAI.BaseMgt.Domain.Entities.Project", b =>
                {
                    b.HasOne("Senior.AgileAI.BaseMgt.Domain.Entities.Organization", "Organization")
                        .WithMany("Projects")
                        .HasForeignKey("Organization_IdOrganization")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Senior.AgileAI.BaseMgt.Domain.Entities.OrganizationMember", "ProjectManager")
                        .WithMany()
                        .HasForeignKey("ProjectManager_IdProjectManager")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("ProjectManager");
                });

            modelBuilder.Entity("Senior.AgileAI.BaseMgt.Domain.Entities.ProjectPrivilege", b =>
                {
                    b.HasOne("Senior.AgileAI.BaseMgt.Domain.Entities.OrganizationMember", "OrganizationMember")
                        .WithMany("ProjectPrivileges")
                        .HasForeignKey("OrganizationMember_IdOrganizationMember")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Senior.AgileAI.BaseMgt.Domain.Entities.Project", "Project")
                        .WithMany("ProjectPrivileges")
                        .HasForeignKey("Project_IdProject")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganizationMember");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Senior.AgileAI.BaseMgt.Domain.Entities.ProjectRequirement", b =>
                {
                    b.HasOne("Senior.AgileAI.BaseMgt.Domain.Entities.Project", "Project")
                        .WithMany("ProjectRequirements")
                        .HasForeignKey("Project_IdProject")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Senior.AgileAI.BaseMgt.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Senior.AgileAI.BaseMgt.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("User_IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Senior.AgileAI.BaseMgt.Domain.Entities.User", b =>
                {
                    b.HasOne("Senior.AgileAI.BaseMgt.Domain.Entities.Country", "Country")
                        .WithMany("Users")
                        .HasForeignKey("Country_IdCountry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Senior.AgileAI.BaseMgt.Domain.Entities.Country", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Senior.AgileAI.BaseMgt.Domain.Entities.Organization", b =>
                {
                    b.Navigation("OrganizationMembers");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Senior.AgileAI.BaseMgt.Domain.Entities.OrganizationMember", b =>
                {
                    b.Navigation("ProjectPrivileges");
                });

            modelBuilder.Entity("Senior.AgileAI.BaseMgt.Domain.Entities.Project", b =>
                {
                    b.Navigation("ProjectPrivileges");

                    b.Navigation("ProjectRequirements");
                });

            modelBuilder.Entity("Senior.AgileAI.BaseMgt.Domain.Entities.User", b =>
                {
                    b.Navigation("Organization");

                    b.Navigation("OrganizationMember");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
